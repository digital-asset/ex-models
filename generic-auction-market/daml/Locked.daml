daml 1.2
module Locked where

import Asset


template (Asset t, Template (Locked t)) => Lockable t
  with
    issuer    : Party
    owner     : Party
    observers : [Party]
  where
    signatory issuer, owner

    key (issuer, owner) : (Party, Party)

    maintainer key._2

    controller owner can
      nonconsuming LockAsset : ContractId (Locked t)
        with
          escrow   : Party
          assetCid : ContractId t
          lockId   : Text
        do
          asset <- fetch assetCid
          assert (asset.owner == owner)
          assert (asset.issuer == issuer)
          archive assetCid
          create $ Locked with asset, escrow, lockId, observers

      DiscloseLockable : ContractId (Lockable t)
        with
          party : Party
        do
          create this
            with observers = if elem party observers
                  then observers else party :: observers


template (Asset t) => Locked t
  with
    asset     : t
    escrow    : Party
    lockId    : Text
    observers : [Party]
  where
    signatory asset.issuer, asset.owner

    observer observers

    key (asset.owner, lockId) : (Party, Text)

    maintainer key._1

    controller escrow can
      UnlockAsset : ContractId t
        do create asset

      UnlockAndTransferAsset : ContractId t
        with
          newOwner : Party
        do
          create $ asset with owner = newOwner

      DiscloseLocked : ContractId (Locked t)
        with
          party : Party
        do
          create this
            with observers = if elem party observers
                  then observers else party :: observers
