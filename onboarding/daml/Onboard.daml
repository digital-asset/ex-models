-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Onboard where

template Task
  with
    id : Text
    description : Text
    assigner : Party
    assignee : Party
    checker : Party
  where
    signatory assigner
    observer assignee, checker

    key (id, assigner, assignee) : (Text, Party, Party)
    maintainer key._2

    choice SignOff : ()
      controller checker
      do return ()

onboarding = scenario do
  hr <- getParty "HR"
  [alice, supervisor] <- mapA getParty ["Alice", "Supervisor"]

  taskCid <- submit hr do
    create Task with
      id = "onboard"
      description = "Complete the onboarding process"
      assigner = hr
      assignee = alice
      checker = supervisor

  -- PART 2: supervisor splits the task up. Creates his own workflow "SubTasks" below
  let
    departmentNames = ["IT", "Engineering", "Operations", "Compliance"]
    departmentToSubTask d = do
      dep <- getParty d
      return $ Task with
          id = d <> "_onboard"
          description = "Complete " <> d <> " onboarding"
          assigner = supervisor
          assignee = alice
          checker = dep
  [it, eng, ops, com] <- mapA getParty departmentNames
  subtasks <- mapA departmentToSubTask departmentNames
  let subtaskKeys = map (\st -> st.id) subtasks

  [itOb, engOb, opsOb, comOb] <- submit supervisor do
    mapA (\st -> create st) subtasks

  subTasksCid <- submit supervisor do
    task <- fetch taskCid
    create SubTasks with
      task
      subtaskKeys

  -- Alice can't sign complete her onboarding as there are tasks remaining
  submitMustFail alice do
    exercise subTasksCid CompleteTask

  -- Alice completes her tasks one by one and people sign off
  submit it do exercise itOb SignOff
  submit eng do exercise engOb SignOff
  submit ops do exercise opsOb SignOff
  submit com do exercise comOb SignOff

  -- Now alice can complete her onboarding
  submit alice do
    exercise subTasksCid CompleteTask


template SubTasks
  with
    task : Task
    subtaskKeys : [Text]
  where
    signatory task.checker
    observer task.assignee

    choice CompleteTask : ()
      controller task.assignee
      do
        let stks = map (\stk -> (stk, task.checker, task.assignee)) subtaskKeys
        subtaskCids <- mapA (lookupByKey @Task) stks
        assert (all (== None) subtaskCids)
        (taskCid, _) <- fetchByKey @Task (Prelude.key task)
        exercise taskCid SignOff
