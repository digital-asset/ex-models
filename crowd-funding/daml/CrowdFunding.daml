-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module CrowdFunding where

import Iou

template Campaign
  with
    originator : Party
    name : Text
    description : Text
    backers : [Party]
    ious : [ContractId Iou]
    raised : Decimal
    deadline : Time
    threshold : Decimal
  where
    signatory originator
    signatory backers

    controller originator can
      Invite : ContractId BackerInvite
        with backer : Party
        do
          create BackerInvite with project = this; backer
      Claim : [ContractId Iou]
        do
          now <- getTime
          assertMsg "Can only claim after deadline" $ now >= deadline
          assertMsg "Can only claim if raised more than threshold" $ raised >= threshold
          unlockedIous <- mapA (\i -> exercise i Unlock) ious
          mapA (\i -> exercise i Transfer with newOwner = originator) unlockedIous

    choice Pledge : ContractId Campaign
      with
        backer : Party
        iouId : ContractId Iou
      controller backer
      do
        now <- getTime
        assertMsg "Pledges can only happen before the deadline" $ now < deadline
        assert $ elem backer backers
        iou <- fetch iouId
        assert $ iou.amount > 0.0
        lockedIou <- exercise iouId Lock with newLocker = originator
        create this with ious = lockedIou :: ious; raised = raised + iou.amount

    choice Reclaim : [ContractId Iou]
      with backer : Party
      controller backer
      do
        now <- getTime
        assert $ elem backer backers
        assertMsg "Can only reclaim after deadline" $ now >= deadline
        assertMsg "Can only reclaim if raised less than threshold" $ raised < threshold
        mapA (\i -> exercise i Unlock) ious

template BackerInvite
  with
    project : Campaign
    backer : Party
  where
    signatory project.originator, project.backers
    controller backer can
      Accept : ContractId Campaign
        do
          create project with backers = backer :: project.backers
