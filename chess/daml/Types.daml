-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Types where

import DA.Text

data GameId = GameId with
  ref : Text
  white : Party
  black : Party
    deriving (Eq, Show)

oppositePlayer : Party -> GameId -> Party
oppositePlayer player gameId =
  if player == gameId.white
  then gameId.black
  else gameId.white

data PieceType =
  Pawn | Rook | Knight | Bishop | Queen | King
    deriving (Eq, Show, Ord)

data Player =
  Black | White
    deriving (Eq, Show, Ord)

data Coord = A1 | A2 | A3 | A4 | A5 | A6 | A7 | A8
           | B1 | B2 | B3 | B4 | B5 | B6 | B7 | B8
           | C1 | C2 | C3 | C4 | C5 | C6 | C7 | C8
           | D1 | D2 | D3 | D4 | D5 | D6 | D7 | D8
           | E1 | E2 | E3 | E4 | E5 | E6 | E7 | E8
           | F1 | F2 | F3 | F4 | F5 | F6 | F7 | F8
           | G1 | G2 | G3 | G4 | G5 | G6 | G7 | G8
           | H1 | H2 | H3 | H4 | H5 | H6 | H7 | H8
    deriving (Eq, Show, Ord, Enum)

instance MapKey Coord where
  keyToText c = keyToText $ fromEnum c
  keyFromText t = toEnum $ keyFromText t

data Piece = Piece with
  coord : Coord
  tp : PieceType
  owner : Player
  moved : Bool
    deriving (Eq, Show, Ord)

data GameState = GameState with
  player : Player
  pieces : [Piece]
  everCheck : (Bool, Bool)
  moves : [ChessMove]
    deriving (Eq, Show)

data ChessMove = ChessMove with
  from : Coord
  to : Coord
  promote : Optional PieceType
  check : Optional (Coord, Coord)
    deriving (Eq, Show)

data MoveResult
  = Winner Player
  | NewState GameState
  | Error Text

-- | A class for types that can be used as keys for the `Map` type.
-- All keys `k` must satisfy `keyFromText (keyToText k) == k`.
class Eq k => MapKey k where
  -- | Turn a key into its textual representation. This function must be
  -- injective.
  keyToText : k -> Text
  -- | Recover a key from its textual representation. `keyFromText x` is
  -- allowed to fail whenever there is _no_ key `k` with `keyToText k == x`.
  -- Whenever such a `k` does exist, then it must satisfy
  -- `keyFromText x == k`.
  keyFromText : Text -> k

keyFromTextNote : Text -> Text -> Text
keyFromTextNote target t =
  "keyFromText: could not parse " <> show t <> " as '" <> target <> "'"

instance MapKey Int where
  keyToText = show
  keyFromText t =
    case parseInt t of
      None -> error (keyFromTextNote "Int" t)
      Some x -> x