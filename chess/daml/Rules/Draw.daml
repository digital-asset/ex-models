-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Rules.Draw where

import DA.Foldable as F
import DA.List as L
import DA.Next.Map as M
import DA.Optional

import Types

import Rules.Data
import Rules.Main
import Rules.Move

data OrdGameState = OrdGameState with
  player : Player
  pieces : Map Coord Piece
    deriving (Eq, Show, Ord)

data DrawState = DrawState with
  idleMoves : Int
  stateCounts : [(OrdGameState, Int)]
  gameState : GameState

-- | Checkdraw checks the 50 move rule and threefold repetition by
-- | Replaying the whole game
checkDraw : [ChessMove] -> E Bool
checkDraw moves = do
  fds <- efds
  let maxRepeats = maximum $ map snd fds.stateCounts
  return (maxRepeats >= 3 || fds.idleMoves >= 50)
  where
    is = initState ()

    ids = DrawState with
      idleMoves = 0
      stateCounts = [(toOrd is, 1)]
      gameState = is

    efds = L.foldr
      moveFn
      (Right ids)
      moves

toOrd : GameState -> OrdGameState
toOrd gs = OrdGameState with
  player = gs.player
  pieces = M.fromList $ map (\p -> (p.coord, p)) gs.pieces

moveFn : ChessMove -> E DrawState -> E DrawState
moveFn move eds = do
  ds <- eds
  gameState <- tryMoveInner ds.gameState move
  md <- toMoveData ds.gameState move
  capture <- checkCapture md
  let
    idle = isNone capture && md.piece.tp /= Pawn
    idleMoves = if idle
      then ds.idleMoves + 1
      else 0
    stateCounts = increment (toOrd gameState) ds.stateCounts
  return $ DrawState with ..

increment : (Ord a) => a -> [(a, Int)] -> [(a, Int)]
increment k list =
  let
    filtered = L.filter (\(a, _) -> a /= k) list
    elem = find (\(a, _) -> a == k) list
  in case elem of
      None -> (k, 1) :: filtered
      Some (_, i) -> (k, i + 1) :: filtered
