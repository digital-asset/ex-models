-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Rules.Data where

import DA.Either
import DA.Next.Map as M
import DA.Text as T

import Types

-- Some aliases for ease of use
-- col, row [0,7]
type IntCoord = (Int, Int)

-- | Turns a `Coord` into integer coordinates with x in [0-7]
toIntCoord : Coord -> IntCoord
toIntCoord c = (i / 8, i % 8)
  where i = fromEnum c

toCoord (col, row) = toEnum i
  where i = col * 8 + row

flipRow : IntCoord -> IntCoord
flipRow (col, row) = (col, 7 - row)

flipCol : IntCoord -> IntCoord
flipCol (col, row) = (7 - col, row)

colD : IntCoord -> IntCoord -> Int
colD c1 c2 = abs(c1._1 - c2._1)

rowD : IntCoord -> IntCoord -> Int
rowD c1 c2 = abs(c1._2 - c2._2)

instance MapKey IntCoord where
  keyToText c = keyToText c._1 <> ";" <> keyToText c._2
  keyFromText t = case T.splitOn ";" t of
    [a, b] -> (keyFromText a, keyFromText b)
    _ -> error "malformatted key"

type StateMap = Map IntCoord Piece
type E = Either Text
type Capture = Optional IntCoord

-- | Preprocessed move data to be used by other rule functions
data MoveData = MoveData with
  state : GameState
  stateMap : StateMap
  move : ChessMove
  from : IntCoord
  to : IntCoord
  piece : Piece

-- | Takes a `GameState` and tries to turn it into a map from
-- | integer coordinates x in [0-7] and y in [0-7]. Fails if a
-- | field is double occupied.
mapState : GameState -> E StateMap
mapState s =
  foldl
    work
    (Right M.empty)
    s.pieces
  where
    work e p =
      case e of
        r@(Left _) -> r
        Right m -> do
          let pc = toIntCoord p.coord
          if member pc m
            then
              Left ("Double occupation on " <> show p)
            else
              Right (M.insert pc p m)

-- | Function to pre-process move and game state
toMoveData : GameState -> ChessMove -> E MoveData
toMoveData state move = do
  let from = toIntCoord move.from
      to = toIntCoord move.to
  stateMap <- mapState state
  piece <- optionalToEither "From position not occupied" $ M.lookup from stateMap
  assertMsg "Player doesn't own piece" (state.player == piece.owner)
  return $ MoveData with ..


initState x =
  GameState with
    player = White
    pieces = initWhitePieces ++ initBlackPieces
    everCheck = (False, False)
    moves = []
  where
    initTypes = [Rook, Knight, Bishop, Queen, King, Bishop, Knight, Rook]

    initWhitePawns =
      map (\l -> Piece with
        coord = toCoord (l, 1)
        tp = Pawn
        owner = White
        moved = False)
      [0 .. 7]

    initWhitePieces = initWhitePawns ++
      map (\(col, tp) -> Piece with
        coord = toCoord (col, 0)
        tp = tp
        owner = White
        moved = False)
      (zip [0..7] initTypes)

    mirror : Piece -> Piece
    mirror p = p with
      coord = toCoord (flipRow (toIntCoord p.coord))
      owner = Black
    initBlackPieces = map mirror initWhitePieces
