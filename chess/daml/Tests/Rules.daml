-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Tests.Rules where

import DA.Assert

import Types

import Rules.Data
import Rules.Main
import Rules.Path
import Rules.Util

initStateMap = scenario do
  case mapState $ initState () of
    Left e -> abort e
    Right _ -> return ()

initStateWin = scenario do
  case checkWin $ initState () of
    None -> return ()
    Some p -> abort $ show p

testIntCoord = scenario do
  toIntCoord C1 === (2, 0)
  toIntCoord H8 === (7, 7)

testCheckWin = scenario do
  let
    filterNot f = filter (not . f)
    rmBlackKing = filterNot (\p -> p.tp == King && p.owner == Black)
    rmWhiteKing = filterNot (\p -> p.tp == King && p.owner == White)
    is = initState ()
    whiteWin = is with pieces = rmBlackKing is.pieces
    blackWin = is with pieces = rmWhiteKing is.pieces

  checkWin is === None
  checkWin whiteWin === Some White
  checkWin blackWin === Some Black

testPathBetween = scenario do
  pathBetween (2,2) (4,4) === Right [(3,3)]
  pathBetween (2,2) (5,2) === Right [(3,2), (4,2)]
  pathBetween (2,2) (4,0) === Right [(3,1)]
  pathBetween (2,2) (2,0) === Right [(2,1)]
  pathBetween (2,2) (1,1) === Right []
  pathBetween (2,2) (0,2) === Right [(1,2)]
  pathBetween (2,2) (0,4) === Right [(1,3)]
  pathBetween (2,2) (2,5) === Right [(2,3), (2, 4)]
  pathBetween (2,2) (3,5) === Left "Not a straight path"

testPawnPath = scenario do
  path Pawn White False (4, 1) (4, 1) === Left "Null move is not valid"
  path Pawn White False (4, 1) (4, 2) === Right []
  path Pawn White False (4, 1) (4, 3) === Right [(4, 2)]
  path Pawn White False (4, 1) (3, 2) === Left "Invalid move"

  path Pawn White False (4, 2) (4, 3) === Right []
  path Pawn White False (4, 2) (4, 4) === Left "Invalid move"
  path Pawn White False (4, 2) (3, 1) === Left "Invalid move"
  path Pawn White False (4, 2) (3, 3) === Left "Invalid move"

  path Pawn White True (4, 1) (4, 1) === Left "Null move is not valid"
  path Pawn White True (4, 1) (4, 2) === Left "Invalid move"
  path Pawn White True (4, 1) (4, 3) === Left "Invalid move"
  path Pawn White True (4, 1) (3, 2) === Right []

  path Pawn White True (4, 2) (4, 3) === Left "Invalid move"
  path Pawn White True (4, 2) (4, 4) === Left "Invalid move"
  path Pawn White True (4, 2) (3, 1) === Left "Invalid move"
  path Pawn White True (4, 2) (3, 3) === Right []

  path Pawn Black False (4, 6) (4, 6) === Left "Null move is not valid"
  path Pawn Black False (4, 6) (4, 5) === Right []
  path Pawn Black False (4, 6) (4, 4) === Right [(4, 5)]
  path Pawn Black False (4, 6) (3, 5) === Left "Invalid move"

  path Pawn Black False (4, 5) (4, 4) === Right []
  path Pawn Black False (4, 5) (4, 3) === Left "Invalid move"
  path Pawn Black False (4, 5) (3, 6) === Left "Invalid move"
  path Pawn Black False (4, 5) (3, 4) === Left "Invalid move"

  path Pawn Black True (4, 6) (4, 6) === Left "Null move is not valid"
  path Pawn Black True (4, 6) (4, 5) === Left "Invalid move"
  path Pawn Black True (4, 6) (4, 4) === Left "Invalid move"
  path Pawn Black True (4, 6) (3, 5) === Right []

  path Pawn Black True (4, 5) (4, 4) === Left "Invalid move"
  path Pawn Black True (4, 5) (4, 3) === Left "Invalid move"
  path Pawn Black True (4, 5) (3, 6) === Left "Invalid move"
  path Pawn Black True (4, 5) (3, 4) === Right []

testRookPath = scenario do
  path Rook White False (4, 1) (4, 1) === Left "Null move is not valid"
  path Rook White False (4, 1) (7, 1) === Right [(5,1), (6,1)]
  path Rook White False (4, 1) (2, 1) === Right [(3,1)]
  path Rook White False (4, 1) (4, 0) === Right []
  path Rook White False (4, 1) (4, 3) === Right [(4,2)]
  path Rook White False (4, 1) (5, 2) === Left "Invalid move"

testKnightPath = scenario do
  path Knight White False (4, 1) (4, 1) === Left "Null move is not valid"
  path Knight White False (3, 3) (5, 4) === Right []
  path Knight White False (3, 3) (5, 2) === Right []
  path Knight White False (3, 3) (4, 1) === Right []
  path Knight White False (3, 3) (4, 5) === Right []
  path Knight White False (3, 3) (2, 5) === Right []
  path Knight White False (3, 3) (2, 1) === Right []
  path Knight White False (3, 3) (1, 4) === Right []
  path Knight White False (3, 3) (1, 2) === Right []
  path Knight White False (4, 1) (5, 2) === Left "Invalid move"

testBishopPath = scenario do
  path Bishop White False (4, 1) (4, 1) === Left "Null move is not valid"
  path Bishop White False (4, 1) (7, 4) === Right [(5,2), (6,3)]
  path Bishop White False (4, 1) (5, 0) === Right []
  path Bishop White False (4, 1) (3, 0) === Right []
  path Bishop White False (4, 1) (2, 3) === Right [(3,2)]
  path Bishop White False (4, 1) (4, 2) === Left "Invalid move"

testQueenPath = scenario do
  path Queen White False (4, 1) (4, 1) === Left "Null move is not valid"
  path Queen White False (4, 1) (7, 4) === Right [(5,2), (6,3)]
  path Queen White False (4, 1) (5, 0) === Right []
  path Queen White False (4, 1) (3, 0) === Right []
  path Queen White False (4, 1) (2, 3) === Right [(3,2)]
  path Queen White False (4, 1) (7, 1) === Right [(5,1), (6,1)]
  path Queen White False (4, 1) (2, 1) === Right [(3,1)]
  path Queen White False (4, 1) (4, 0) === Right []
  path Queen White False (4, 1) (4, 3) === Right [(4,2)]
  path Queen White False (4, 1) (5, 3) === Left "Not a straight path"

testKingPath = scenario do
  path King White False (4, 1) (4, 1) === Left "Null move is not valid"
  path King White False (3, 3) (4, 4) === Right []
  path King White False (3, 3) (4, 3) === Right []
  path King White False (3, 3) (4, 2) === Right []
  path King White False (3, 3) (3, 2) === Right []
  path King White False (3, 3) (2, 2) === Right []
  path King White False (3, 3) (2, 3) === Right []
  path King White False (3, 3) (2, 4) === Right []
  path King White False (3, 3) (3, 4) === Right []
  path King White False (3, 3) (3, 5) === Left "Invalid move"

takeMove : (Either Text GameState) -> (Coord, Coord) -> (Either Text GameState)
takeMove eg (from, to) = do
      g <- eg
      tryMoveInner g $
        ChessMove from to None None

testFoolsMateInner = scenario do
  let
    moves = [
      (G2, G4),
      (E7, E6),
      (F2, F4),
      (D8, H4),
      (E1, F2),
      (H4, F2)
      ]
    game = foldl takeMove (Right $ initState ()) moves

  case game of
    Right s -> checkWin s === Some Black
    _ -> abort $ show game

testBlocked = scenario do
  let
    moves = [(D1, D7)]
    game = foldl takeMove (Right $ initState ()) moves

  game === Left "Path blocked"
