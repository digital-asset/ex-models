-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Tests.Draw where

import DA.Assert

import Types
import Chess
import Init

import Tests.Chess

testThreeRepeat = scenario do
  InitData {..} <- initData

  submitMustFail white do
    exercise game ClaimDraw

  let
    moves = [
      (white, A2, A4),
      (black, A7, A5),
      -- (1) Move the A column rooks forward and back.
      (white, A1, A3),
      (black, A8, A6),
      (white, A3, A1),
      (black, A6, A8),
      -- (2)
      (white, A1, A3),
      (black, A8, A6),
      (white, A3, A1),
      (black, A6, A8),
      -- (3)
      (white, A1, A3),
      (black, A8, A6),
      (white, A3, A1),
      (black, A6, A8)
      ]
  game <- foldl takeMove (return $ Right game) moves

  draw <- case game of
    Right g -> do
      submit white do
        exercise g ClaimDraw
    Left _ -> abort "Should be in play"

  submit white do
    res <- fetch draw
    res.winner === None

  assert True

testFiftyMove = scenario do
  InitData {..} <- initData

  submitMustFail white do
    exercise game ClaimDraw

  let
    moves = [
      (white, A2, A4),
      (black, A7, A5)
      ] ++
      (join (replicate 11 [
        (white, A1, A3),
        (black, A8, A6),
        (white, A3, A1),
        (black, A6, A8)
      ])) ++
      [
        (white, A1, A3),
        (black, A8, A6),
        (white, A3, B3)
      ]
  game <- foldl takeMove (return $ Right game) moves

  case game of
    Right g -> do
      submitMustFail white do
        exercise g ClaimDraw
    Left _ -> abort "Should be in play"

  game <- takeMove (return game) (black, A6, A8)


  draw <- case game of
    Right g -> do
      submit white do
        exercise g ClaimDraw
    Left _ -> abort "Should be in play"

  submit white do
    res <- fetch draw
    res.winner === None

  assert True
