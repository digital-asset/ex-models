-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Tests.SpecialRules where

import DA.Next.Map as M
import DA.Either
import DA.Optional

import Chess
import Init
import Types

import Rules.Data

import Tests.Chess

testCastle = scenario do
  InitData {..} <- initData

  submitMustFail white do
    exercise game Move with
          move = ChessMove with
            from = E1
            to = G1
            promote = None
            check = None
  let
    moves = [
      (white, G2, G4),
      (black, G7, G6),
      (white, F1, H3),
      (black, G6, G5),
      (white, G1, F3),
      (black, F8, H6)
      ]
  game <- foldl takeMove (return $ Right game) moves

  kingCastle <- case game of
    Right g -> do
      submit white do
        exercise g Move with
          move = ChessMove with
            from = E1
            to = G1
            promote = None
            check = None
    Left _ -> abort "Should be in play"

  case kingCastle of
    Right g -> do
      kc <- submit white do fetch g
      let
        t = do
          sm <- mapState kc.state
          king <- optionalToEither "King position not occupied" $ M.lookup (6,0) sm
          assertMsg "No King in expected position"
            (king.tp == King && king.moved)
          rook <- optionalToEither "Rook position not occupied" $ M.lookup (5,0) sm
          assertMsg "No Rook in expected position"
            (rook.tp == Rook && rook.moved)
      case t of
        Left e -> abort e
        Right _ -> assert True
    Left _ -> abort "Game should be in play"

testCheck = scenario do
  InitData {..} <- initData

  submitMustFail white do
    exercise game Move with
          move = ChessMove with
            from = E1
            to = G1
            promote = None
            check = Some (H4, E1)
  let
    moves = [
      (white, G2, G4),
      (black, E7, E6),
      (white, F2, F4)
      ]
  game <- foldl takeMove (return $ Right game) moves

  check <- case game of
    Right g -> do
      submit black do
        exercise g Move with
          move = ChessMove with
            from = D8
            to = H4
            promote = None
            check = Some (H4, E1)
    Left _ -> abort "Should be in play"

  case check of
    Right g -> do
      c <- submit white do fetch g
      assertMsg "White should be checked" (c.state.everCheck == (True, False))
    Left _ -> abort "Game should be in play"

testEnPassant = scenario do
  InitData {..} <- initData

  submitMustFail white do
    exercise game Move with
          move = ChessMove with
            from = B2
            to = C3
            promote = None
            check = None
  let
    moves = [
      (white, B2, B4),
      (black, E7, E6),
      (white, B4, B5),
      (black, C7, C5)
      ]
  game <- foldl takeMove (return $ Right game) moves

  enPassant <- case game of
    Right g -> do
      submit white do
        exercise g Move with
          move = ChessMove with
            from = B5
            to = C6
            promote = None
            check = None
    Left _ -> abort "Should be in play"

  case enPassant of
    Right g -> do
      ep <- submit white do fetch g
      let
        t = do
          sm <- mapState ep.state
          assertMsg "Black pawn should be gone" (isNone (M.lookup (3,5) sm))
      case t of
        Left e -> abort e
        Right _ -> assert True
    Left _ -> abort "Game should be in play"

testPromote = scenario do
  InitData {..} <- initData

  submitMustFail white do
    exercise game Move with
          move = ChessMove with
            from = B2
            to = C3
            promote = Some Queen
            check = None
  let
    moves = [
      (white, A2, A4),
      (black, A7, A5),
      (white, B2, B4),
      (black, A5, B4),
      (white, A4, A5),
      (black, A8, A6),
      (white, C2, C3),
      (black, A6, H6),
      (white, A5, A6),
      (black, H6, G6),
      (white, A6, A7),
      (black, G6, H6)
      ]
  game <- foldl takeMove (return $ Right game) moves

  promote <- case game of
    Right g -> do
      submit white do
        exercise g Move with
          move = ChessMove with
            from = A7
            to = A8
            promote = Some Queen
            check = None
    Left _ -> abort "Should be in play"

  case promote of
    Right g -> do
      p <- submit white do fetch g
      let
        t = do
          sm <- mapState p.state
          queen <- optionalToEither "Queen position not occupied" $ M.lookup (0,7) sm
          assertMsg ("No Queen in expected position: " <> show queen)
            (queen.tp == Queen && queen.moved)
      case t of
        Left e -> abort e
        Right _ -> assert True
    Left _ -> abort "Game should be in play"
