-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Governance where

import DA.Next.Set as S
import DA.List as L

data Proposal
  = CreateConstitution Constitution
  | UpdateConstitutionText (ContractId Constitution, Text)
  | UpgradeConstitution (ContractId Constitution)
  deriving (Eq, Show)

type DecisionOutcome = Optional (Either (ContractId Constitution) (ContractId ConstitutionV2))

execute : Bool -> Proposal -> Update DecisionOutcome
execute False _ = do pure None
execute _ (CreateConstitution constitution) =
  do
    constitutionId <- create constitution
    pure $ Some $ Left constitutionId
execute _ (UpdateConstitutionText (constitutionId, text)) =
  do
    constitutionId2 <- exercise constitutionId UpdateText with newText = text
    pure $ Some $ Left constitutionId2
execute _ (UpgradeConstitution constitutionId) =
  do
    constitution <- fetch constitutionId
    upgrade <- create ConstituationUpgrade with government = constitution.government; citizens = constitution.citizens
    constitutionId2 <- exercise upgrade Execute with constitutionId
    pure $ Some $ Right constitutionId2
 
template Constitution
  with
    government : Party
    citizens : Set Party
    text : Text
    version : Int
  where
    signatory government, citizens

    choice UpdateText : ContractId Constitution
      with newText : Text
      controller government, citizens
      do create this with text = newText

template ConstitutionV2
  with
    government : Party
    citizens : Set Party
    text : Text
    version : Int
  where
    signatory government, citizens

    choice UpgradeV2 : ContractId ConstitutionV2
      with newText : Text
      controller government, citizens
      do create this with text = newText

    nonconsuming choice CreateBallot : BallotKey
      with
        name : Text
        proposal : Proposal
      controller government
      do
        let ballot = Ballot with government; name; proposal; voters = citizens; voted = S.empty; votes = []
        create ballot
        pure (key ballot)

template ConstituationUpgrade
  with
    government : Party
    citizens : Set Party
  where
    signatory government, citizens

    choice Execute : ContractId ConstitutionV2
      with constitutionId : ContractId Constitution
      controller government, citizens
      do
        constitution <- fetch constitutionId
        let constitutionV2 = ConstitutionV2 with government; citizens; text = constitution.text; version = constitution.version + 1
        archive constitutionId
        create constitutionV2

type BallotKey = (Party, Text)

template Ballot
  with
    government : Party
    name : Text
    proposal : Proposal
    voters : Set Party
    voted : Set Party
    votes : [Bool]
  where
    signatory government, voted
    observer voters

    key (government, name) : BallotKey
    maintainer key._1

    choice Add : ()
      with voter : Party
      controller government
      do
        create this with voters = S.insert voter voters
        pure ()

    choice Decide : DecisionOutcome
      controller government
      do
        assertMsg "All voters must vote" $ S.size voters == length votes
        let yays = length $ L.filter (\v -> v) votes
        let nays = length $ L.filter (\v -> not v) votes
        assertMsg "Cannot decide on tie" $ yays /= nays
        let accept = yays > nays
        execute accept proposal

    choice Vote : ()
      with
        voter : Party
        accept : Bool
      controller voter
      do
        assertMsg "Voter not added" $ S.member voter voters
        assertMsg "Voter already voted" $ not $ S.member voter voted
        create this with voted = S.insert voter voted; votes = accept :: votes
        pure ()
